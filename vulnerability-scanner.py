import socket

def port_scan(target):
     print(f"Starting scan on {target}")
     try:
         for port in range(1, 1025):  #Scan ports 1 to 1024
             sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
             sock.settimeout(0.5)
             result = sock.connect_ex((target, port))
             if result == 0:
                 print(f"Port {port}: Open")
             sock.close()
     except KeyboardInterrupt:
         print("Scan interrupted.")
     except socket.gaierror:
         print("Hostname could not be resolved.")
     except socket.error:
         print("Couldn't connect to server.")

import requests

def check_headers(url):
     try:
         response = requests.get(url)
         headers = response.headers

         security_headers = ['X-Frame-Options', 'Strict-Transport-Security', 'X-Content-Type-Options']

         print("Checking for security headers:")
         for header in security_headers:
             if header in headers:
                 print(f"{header}: Present")
             else:
                 print(f"{header}: Missing")
     except requests.exceptions.RequestException as e:
         print(f"Error fetching URL: {e}")

import ssl
import socket
from datetime import datetime

def check_ssl_expiry(hostname):
     context = ssl.create_default_context()
     with socket.create_connection((hostname, 443)) as sock:
         with context.wrap_socket(sock, server_hostname=hostname) as ssock:
             cert = ssock.getpeercert()
             expiry_date = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
             print(f"SSL Certificate for {hostname} expires on {expiry_date}")

             if expiry_date < datetime.now():
                 print(f"Warning: SSL Certificate has expired!")
             else:
                 print(f"SSL Certificate is valid.")

import argparse

def port_scan(target):
    print(f"Performing a port scan on {target}")

def check_headers(url):
    print(f"Checking HTTP security headers for {url}")

def check_ssl_expiry(target):
    print(f"Checking SSL certificate expiration for {target}")

def main():
    parser = argparse.ArgumentParser(description="Basic Vulnerability Scanner")
    parser.add_argument("target", help="IP address or hostname to scan")
    parser.add_argument("--port-scan", action="store_true", help="Perform a port scan")
    parser.add_argument("--header-check", action="store_true", help="Check HTTP security headers")
    parser.add_argument("--ssl-check", action="store_true", help="Check SSL certificate expiration")

    args = parser.parse_args()

    print(f"Scanning target: {args.target}")

    if args.port_scan:
        print("Option selected: Port scan")
        port_scan(args.target)
    
    if args.header_check:
        print("Option selected: HTTP header check")
        check_headers(f"http://{args.target}")
    
    if args.ssl_check:
        print("Option selected: SSL check")
        check_ssl_expiry(args.target)
        
if __name__ == "__main__":
    main()